step "Run a Script" {

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                Write-Host $OctopusParameters["AWS.Region"]
                Write-Host $OctopusParameters["AWS.BucketName"]
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "Hosted Windows"
    }
}

step "Run an AWS CLI Script" {

    action {
        action_type = "Octopus.AwsRunScript"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Get the containers
                echo "Downloading Docker images"
                echo "##octopus[stdout-verbose]"
                docker pull amazon/aws-cli 2>&1
                echo "##octopus[stdout-default]"
                
                # Alias the docker run commands
                shopt -s expand_aliases
                alias aws="docker run --rm -i -v $(pwd):/build -e AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY amazon/aws-cli"
                
                aws s3api head-bucket --bucket #{AWS.BucketName}
                
                echo "Exit code is $?"
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "Hosted Ubuntu"
    }
}

step "Upload Microsite to AWS S3" {

    action {
        action_type = "Octopus.AwsUploadS3"
        is_required = true
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.S3.BucketName = "#{AWS.BucketName}"
            Octopus.Action.Aws.S3.FileSelections = "[{\"type\":\"MultipleFiles\",\"tags\":[],\"metadata\":[],\"cannedAcl\":\"public-read\",\"path\":\"\",\"storageClass\":\"STANDARD\",\"bucketKey\":\"\",\"bucketKeyPrefix\":\"\",\"bucketKeyBehaviour\":\"Custom\",\"performVariableSubstitution\":\"False\",\"performStructuredVariableSubstitution\":\"False\",\"autoFocus\":true,\"pattern\":\"**/*\"}]"
            Octopus.Action.Aws.S3.PackageOptions = "{\"bucketKey\":\"#{Project.AWS.BucketKey}\",\"bucketKeyBehaviour\":\"Custom\",\"bucketKeyPrefix\":\"\",\"storageClass\":\"STANDARD\",\"cannedAcl\":\"private\",\"variableSubstitutionPatterns\":\"\",\"structuredVariableSubstitutionPatterns\":\"\",\"metadata\":[],\"tags\":[]}"
            Octopus.Action.Aws.S3.TargetMode = "FileSelections"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Octopus Server (built-in)"
            Octopus.Action.Package.PackageId = "DevOpsMicrosite"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool = "Hosted Windows"

        packages {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "DevOpsMicrosite"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}